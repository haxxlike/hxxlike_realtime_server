version: "3"
services:
  go_builder:
    build: ./go_runtime
    volumes:
      - ./go_runtime:/backend
    entrypoint:
      - "/bin/sh"
      - "-ecx"
      - >
        go build --trimpath --mod=vendor --buildmode=plugin -o ./backend.so
  postgres:
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - "8080"
      - "5432"
    image: postgres:12.2-alpine
    ports:
      - "5432:5432"
      - "8081:8080"
    volumes:
      - data:/var/lib/postgresql/data
    restart: unless-stopped

  haxx_realtime:
    container_name: haxx_realtime
    build: .
    volumes:
      - ./go_runtime:/backend
    depends_on:
      postgres:
        condition: service_started
      go_builder:
        condition: service_completed_successfully
    entrypoint:
      - "/bin/sh"
      - "-ecx"
      - >
        cp /backend/backend.so /nakama/data/modules && /nakama/nakama migrate up --database.address postgres:localdb@postgres:5432/nakama && exec /nakama/nakama --runtime.env "env=${ENV}" --runtime.env "LAMBDA_URL=${LAMBDA_URL}" --config /nakama/data/presence.yml --database.address postgres:localdb@postgres:5432/nakama
    expose:
      - "7349"
      - "7350"
      - "7351"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7350/"]
      interval: 10s
      timeout: 5s
      retries: 5
    links:
      - "postgres:db"
    ports:
      - "7349:7349"
      - "7350:7350"
      - "7351:7351"
    restart: unless-stopped
volumes:
  data:
